name: Build and Release Flutter APK

on:
  pull_request:
    branches:
      - main

jobs:
  build_and_release:
    name: Build and Release Flutter APK
    runs-on: macos-latest

    steps:
      # Step 1: Check out the repository code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 18
      - name: Set up JDK 18
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '18'

      # Step 3: Set up Flutter (master channel)
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'master'

      # Step 4: Create .env file using repository secrets
      - name: Create .env File
        run: |
          echo "ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}" >> .env
          echo "REGISTERED_PHONENUMBER=${{ secrets.REGISTERED_PHONENUMBER }}" >> .env
          echo "STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env
          echo "TWILIO_SERVICE_SID=${{ secrets.TWILIO_SERVICE_SID }}" >> .env
          echo "VONAGE_API_KEY=${{ secrets.VONAGE_API_KEY }}" >> .env
          echo "VONAGE_API_SECRET=${{ secrets.VONAGE_API_SECRET }}" >> .env
          GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}
          echo "GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}" >> $GITHUB_ENV

      # Step 5: Install Flutter packages
      - name: Get Flutter packages
        run: flutter pub get

      # Step 6: Build the Flutter APK and split by architectureee
      - name: Build Flutter APK
        run: flutter build apk --split-per-abi

      # Step 7: Upload APK artifacts
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Flutter APKs
          path: build/app/outputs/flutter-apk/

      # Step 8: Create a GitHub release with the APKs
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.sha }}-${{ github.run_number }}
          release_name: Release ${{ github.sha }}-${{ github.run_number }}
          draft: false
          prerelease: false

      # Step 9: Upload Release Assets
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-arm64-v8a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: app-x86_64-release.apk
          asset_content_type: application/vnd.android.package-archive






